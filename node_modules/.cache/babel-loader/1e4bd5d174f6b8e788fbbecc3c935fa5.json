{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nvar PropTypes__namespace = /*#__PURE__*/_interopNamespace(PropTypes);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar ProgressBar = function (_a) {\n  var bgColor = _a.bgColor,\n      completed = _a.completed,\n      baseBgColor = _a.baseBgColor,\n      height = _a.height,\n      width = _a.width,\n      margin = _a.margin,\n      padding = _a.padding,\n      borderRadius = _a.borderRadius,\n      labelAlignment = _a.labelAlignment,\n      labelColor = _a.labelColor,\n      labelSize = _a.labelSize,\n      isLabelVisible = _a.isLabelVisible,\n      customLabelStyles = _a.customLabelStyles,\n      transitionDuration = _a.transitionDuration,\n      transitionTimingFunction = _a.transitionTimingFunction,\n      className = _a.className,\n      dir = _a.dir,\n      ariaValuemin = _a.ariaValuemin,\n      ariaValuemax = _a.ariaValuemax,\n      ariaValuetext = _a.ariaValuetext,\n      maxCompleted = _a.maxCompleted,\n      customLabel = _a.customLabel,\n      animateOnRender = _a.animateOnRender,\n      barContainerClassName = _a.barContainerClassName,\n      completedClassName = _a.completedClassName,\n      labelClassName = _a.labelClassName,\n      _b = _a.initCompletedOnAnimation,\n      initCompletedOnAnimation = _b === void 0 ? 0 : _b;\n\n  var getAlignment = function (alignmentOption) {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  var alignment = getAlignment(labelAlignment);\n  var initCompletedOnAnimationStr = typeof initCompletedOnAnimation === \"number\" ? \"\".concat(initCompletedOnAnimation, \"%\") : initCompletedOnAnimation;\n\n  var getFillerWidth = function (maxCompletedValue, completedValue) {\n    if (maxCompletedValue) {\n      var ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 ? \"100%\" : \"\".concat(ratio * 100, \"%\");\n    }\n\n    return initCompletedOnAnimationStr;\n  };\n\n  var fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  var _c = React__namespace.useState(initCompletedOnAnimationStr),\n      initWidth = _c[0],\n      setInitWidth = _c[1];\n\n  var containerStyles = {\n    height: height,\n    background: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin\n  };\n  var fillerStyles = {\n    height: height,\n    width: animateOnRender ? initWidth : fillerWidth,\n    background: bgColor,\n    transition: \"width \".concat(transitionDuration || \"1s\", \" \").concat(transitionTimingFunction || \"ease-in-out\"),\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: labelAlignment !== \"outside\" && alignment ? alignment : \"normal\"\n  };\n\n  var labelStyles = __assign({\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\"\n  }, customLabelStyles);\n\n  var outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\"\n  };\n  var completedStr = typeof completed === \"number\" ? \"\".concat(completed, \"%\") : \"\".concat(completed);\n  var labelStr = customLabel ? customLabel : completedStr;\n  React__namespace.useEffect(function () {\n    if (animateOnRender) {\n      requestAnimationFrame(function () {\n        return setInitWidth(fillerWidth);\n      });\n    }\n  }, [fillerWidth, animateOnRender]);\n  return React__namespace.createElement(\"div\", {\n    style: className ? undefined : outsideStyles,\n    className: className,\n    dir: dir,\n    role: \"progressbar\",\n    \"aria-valuenow\": parseFloat(labelStr),\n    \"aria-valuemin\": ariaValuemin,\n    \"aria-valuemax\": ariaValuemax,\n    \"aria-valuetext\": \"\".concat(ariaValuetext === null ? labelStr : ariaValuetext)\n  }, React__namespace.createElement(\"div\", {\n    style: barContainerClassName ? undefined : containerStyles,\n    className: barContainerClassName\n  }, React__namespace.createElement(\"div\", {\n    style: completedClassName ? undefined : fillerStyles,\n    className: completedClassName\n  }, labelAlignment !== \"outside\" && React__namespace.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr))), labelAlignment === \"outside\" && React__namespace.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr));\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes__namespace.oneOfType([PropTypes__namespace.string, PropTypes__namespace.number]).isRequired,\n  bgColor: PropTypes__namespace.string,\n  baseBgColor: PropTypes__namespace.string,\n  height: PropTypes__namespace.string,\n  width: PropTypes__namespace.string,\n  borderRadius: PropTypes__namespace.string,\n  margin: PropTypes__namespace.string,\n  padding: PropTypes__namespace.string,\n  labelAlignment: PropTypes__namespace.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes__namespace.string,\n  labelSize: PropTypes__namespace.string,\n  isLabelVisible: PropTypes__namespace.bool,\n  className: PropTypes__namespace.string,\n  dir: PropTypes__namespace.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes__namespace.number,\n  customLabel: PropTypes__namespace.string,\n  animateOnRender: PropTypes__namespace.bool,\n  barContainerClassName: PropTypes__namespace.string,\n  completedClassName: PropTypes__namespace.string,\n  labelClassName: PropTypes__namespace.string,\n  initCompletedOnAnimation: PropTypes__namespace.oneOfType([PropTypes__namespace.string, PropTypes__namespace.number])\n};\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n  animateOnRender: false,\n  initCompletedOnAnimation: 0\n};\nexports[\"default\"] = ProgressBar;","map":{"version":3,"mappings":"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","names":["_a","completed","baseBgColor","height","width","margin","padding","borderRadius","labelAlignment","labelColor","labelSize","isLabelVisible","customLabelStyles","transitionDuration","transitionTimingFunction","className","dir","ariaValuemin","ariaValuemax","ariaValuetext","maxCompleted","customLabel","animateOnRender","barContainerClassName","completedClassName","labelClassName","_b","initCompletedOnAnimation","getAlignment","alignmentOption","alignment","initCompletedOnAnimationStr","getFillerWidth","maxCompletedValue","completedValue","ratio","Number","concat","fillerWidth","useState","React","initWidth","setInitWidth","containerStyles","background","fillerStyles","bgColor","transition","display","alignItems","justifyContent","labelStyles","__assign","color","fontWeight","fontSize","outsideStyles","completedStr","labelStr","useEffect","requestAnimationFrame","style","undefined","role","parseFloat","ProgressBar","propTypes","PropTypes","oneOfType","string","number","isRequired","oneOf","bool","defaultProps"],"sources":["/Users/saulcontreras/Desktop/Tesis/music-genre-detector/node_modules/@ramonak/react-progress-bar/src/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nexport type ProgressBarProps = {\n  completed: string | number;\n  bgColor?: string;\n  baseBgColor?: string;\n  height?: string;\n  width?: string;\n  borderRadius?: string;\n  margin?: string;\n  padding?: string;\n  labelAlignment?: \"left\" | \"center\" | \"right\" | \"outside\";\n  labelColor?: string;\n  labelSize?: string;\n  customLabelStyles?: React.CSSProperties;\n  isLabelVisible?: boolean;\n  transitionDuration?: string;\n  transitionTimingFunction?:\n  | \"ease\"\n  | \"linear\"\n  | \"ease-in\"\n  | \"ease-out\"\n  | \"ease-in-out\";\n  className?: string;\n  dir?: \"ltr\" | \"rtl\" | \"auto\";\n  ariaValuemin?: number;\n  ariaValuemax?: number;\n  ariaValuetext?: number | null;\n  maxCompleted?: number;\n  customLabel?: string;\n  animateOnRender?: boolean;\n  barContainerClassName?: string;\n  completedClassName?: string;\n  labelClassName?: string;\n  initCompletedOnAnimation?: string | number\n};\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({\n  bgColor,\n  completed,\n  baseBgColor,\n  height,\n  width,\n  margin,\n  padding,\n  borderRadius,\n  labelAlignment,\n  labelColor,\n  labelSize,\n  isLabelVisible,\n  customLabelStyles,\n  transitionDuration,\n  transitionTimingFunction,\n  className,\n  dir,\n  ariaValuemin,\n  ariaValuemax,\n  ariaValuetext,\n  maxCompleted,\n  customLabel,\n  animateOnRender,\n  barContainerClassName,\n  completedClassName,\n  labelClassName,\n  initCompletedOnAnimation = 0\n}) => {\n  const getAlignment = (\n    alignmentOption: ProgressBarProps[\"labelAlignment\"]\n  ) => {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  const alignment = getAlignment(labelAlignment);\n\n  const initCompletedOnAnimationStr = typeof initCompletedOnAnimation === \"number\" ? `${initCompletedOnAnimation}%` : initCompletedOnAnimation;\n\n  const getFillerWidth = (\n    maxCompletedValue: ProgressBarProps[\"maxCompleted\"],\n    completedValue: ProgressBarProps[\"completed\"]\n  ) => {\n    if (maxCompletedValue) {\n      const ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 ? \"100%\" : `${ratio * 100}%`;\n    }\n    return initCompletedOnAnimationStr;\n  };\n\n  const fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  const [initWidth, setInitWidth] = React.useState<string>(initCompletedOnAnimationStr);\n\n  const containerStyles: React.CSSProperties = {\n    height: height,\n    background: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin,\n  };\n\n  const fillerStyles: React.CSSProperties = {\n    height: height,\n    width: animateOnRender ? initWidth : fillerWidth,\n    background: bgColor,\n    transition: `width ${transitionDuration || \"1s\"} ${transitionTimingFunction || \"ease-in-out\"\n      }`,\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent:\n      labelAlignment !== \"outside\" && alignment ? alignment : \"normal\",\n  };\n\n  const labelStyles: React.CSSProperties = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\",\n    ...customLabelStyles\n  };\n\n  const outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\",\n  };\n\n  const completedStr =\n    typeof completed === \"number\" ? `${completed}%` : `${completed}`;\n\n  const labelStr = customLabel ? customLabel : completedStr;\n\n  React.useEffect(() => {\n    if (animateOnRender) {\n      requestAnimationFrame(() => setInitWidth(fillerWidth));\n    }\n  }, [fillerWidth, animateOnRender]);\n\n  return (\n    <div\n      style={className ? undefined : outsideStyles}\n      className={className}\n      dir={dir}\n      role=\"progressbar\"\n      aria-valuenow={parseFloat(labelStr)}\n      aria-valuemin={ariaValuemin}\n      aria-valuemax={ariaValuemax}\n      aria-valuetext={`${ariaValuetext === null ? labelStr : ariaValuetext}`}\n    >\n      <div\n        style={barContainerClassName ? undefined : containerStyles}\n        className={barContainerClassName}\n      >\n        <div\n          style={completedClassName ? undefined : fillerStyles}\n          className={completedClassName}\n        >\n          {labelAlignment !== \"outside\" && (\n            <span\n              style={labelClassName ? undefined : labelStyles}\n              className={labelClassName}\n            >\n              {labelStr}\n            </span>\n          )}\n        </div>\n      </div>\n      {labelAlignment === \"outside\" && (\n        <span\n          style={labelClassName ? undefined : labelStyles}\n          className={labelClassName}\n        >\n          {labelStr}\n        </span>\n      )}\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n  dir: PropTypes.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes.number,\n  customLabel: PropTypes.string,\n  animateOnRender: PropTypes.bool,\n  barContainerClassName: PropTypes.string,\n  completedClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  initCompletedOnAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n  animateOnRender: false,\n  initCompletedOnAnimation: 0\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"script"}